package FalconE;


import Device.DeviceManager;
import Device.SensorListener;
import com.formdev.flatlaf.IntelliJTheme;


/**
 *
 * @author #ravindu_n
 */
public class Display extends javax.swing.JFrame implements SensorListener {
    
    String sensorPort = "COM4";
    
    int sensor_1 = 0;
    int sensor_2 = 0;
    int sensor_3 = 0;
    int sensor_4 = 0;

    /**
     * Creates new form Display
     */
    public Display() {
        
        initComponents();
        
        sensorInit();
        
        log(); //datalogger

    }

   
    ///////////////////////////////////////////////////////////////SetSensorData class
    public class SetSensorData implements Runnable {
        
        private String data;
        private String[] datalist;
        
        public SetSensorData(String f) {
            
            data = f;
            
        }
        
        @Override
        public void run() {
            
            datalist = data.split(":");
            
            if (datalist.length == 5) {
                
                sensor_1 = Integer.valueOf(datalist[1]);
                sensor_2 = Integer.valueOf(datalist[2]);
                sensor_3 = Integer.valueOf(datalist[3]);
                sensor_4 = Integer.valueOf(datalist[4]);
                
            }
            
        }
    }
    
    private boolean listAvailable() {
        
        String[] sensorlist = DeviceManager.getSensorList();
        
        for (String portname : sensorlist) {
            
            if (portname.equals(sensorPort)) {
                
                return true;
                
            }
            
        }
        
        return false;
        
    }
    
    private void sensorInit() {
        DeviceManager.addSensorListener(this);
        if (listAvailable()) {
            
            DeviceManager.openSensor(sensorPort);
            
            setArduino();
            
        }
        
    }
    
    private void setArduino() {
        
        if (DeviceManager.isSenOpen(sensorPort)) {

            //System.out.println("OK");
            DeviceManager.sensorSet();
        }
        
    }

    /////////////////////clock and logger
    private void log() {
        
        new Thread() {
            
            @Override
            public void run() {
                
                while (true) {
                    
                    String logdata;
                    
                    logdata = sensor_1 + ":" + sensor_2 + ":" + sensor_3 + ":" + sensor_4;                    
                    lbldata.setText(logdata);
                    
                    System.out.println(logdata);//for check

                    try {
                        
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        
                    }
                    
                }
                
            }
            
        }.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbldata = new javax.swing.JLabel();
        back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbldata.setText("00");
        lbldata.setOpaque(true);
        getContentPane().add(lbldata, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 500, 50));

        back.setBackground(new java.awt.Color(51, 51, 51));
        back.setMaximumSize(new java.awt.Dimension(800, 350));
        back.setMinimumSize(new java.awt.Dimension(800, 350));
        back.setOpaque(true);
        back.setPreferredSize(new java.awt.Dimension(800, 350));
        getContentPane().add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //Default laf 
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>
        IntelliJTheme.install(Display.class.getResourceAsStream("/dark.theme.json")); //Flatlaf


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new Display().setVisible(true);
                
            }
        });
    }
    
    @Override
    public void sensorReceived(String f) {
        
        java.awt.EventQueue.invokeLater(new SetSensorData(f));
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JLabel lbldata;
    // End of variables declaration//GEN-END:variables
}
